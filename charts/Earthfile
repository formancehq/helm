VERSION 0.8

IMPORT github.com/formancehq/earthly:tags/v0.16.3 AS core
# IMPORT ../.. AS root

BASE:
  FUNCTION
  FROM core+base-image
  RUN apk update && apk add openssl helm

SOURCES:
  FUNCTION
  # COPY (root+license/*) .
  COPY --if-exists Chart.lock .
  COPY Chart.yaml .
  COPY --if-exists README.md .
  COPY --if-exists values.yaml .
  COPY --dir --if-exists templates .
  SAVE ARTIFACT ./* AS LOCAL ./

VALIDATE:
  FUNCTION
  DO --pass-args +LINT
  DO --pass-args +TEMPLATE
  SAVE ARTIFACT ./*.lock AS LOCAL ./
  SAVE ARTIFACT ./README.md AS LOCAL ./
  SAVE ARTIFACT ./values.schema.json AS LOCAL ./

LINT:
  FUNCTION
  ARG additionalArgs
  RUN helm lint ./ --strict $additionalArgs

TEMPLATE:
  FUNCTION
  RUN helm template ./ $additionalArgs

DEPENDENCIES:
  FUNCTION
  RUN helm dependencies update
  SAVE ARTIFACT ./* AS LOCAL ./

PACKAGE:
  FUNCTION
  RUN helm package .
  SAVE ARTIFACT *.tgz AS LOCAL ./

# publish:
#   ARG --required PROJECT
#   FROM ./$PROJECT+package
#   WITH DOCKER
#     RUN --secret GITHUB_TOKEN echo $GITHUB_TOKEN | docker login ghcr.io -u NumaryBot --password-stdin
#   END
#   WITH DOCKER
#     RUN helm push *.tgz oci://ghcr.io/formancehq/helm
#   END


README_GENERATOR:
  FUNCTION
  RUN helm-docs --chart-search-root=.. --document-dependency-values
  SAVE ARTIFACT README.md AS LOCAL README.md

readme-base:
  DO --pass-args +BASE
  RUN apk add go
  ENV GOPATH /go
  ENV GOTOOLCHAIN=local
  ARG GOCACHE=/go-cache
  ARG GOMODCACHE=/go-mod-cache
  ARG HELM_DOCS_VERSION=v1.14
  ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH
  DO --pass-args core+GO_INSTALL --package=github.com/norwoodj/helm-docs/cmd/helm-docs@$HELM_DOCS_VERSION
SCHEMA:
  FUNCTION
  COPY values.yaml .
  RUN helm schema -input values.yaml -output values.schema.json
  SAVE ARTIFACT values.schema.json AS LOCAL values.schema.json
  SAVE ARTIFACT values.yaml

schema-base:
  DO --pass-args +BASE
  RUN apk add --no-cache git
  RUN helm plugin install https://github.com/losisin/helm-values-schema-json.git

increment-version:
  FROM core+base-image
  ARG --required CHART
  WORKDIR /src
  COPY $CHART/Chart.yaml .
  RUN yq eval '.version = "$VERSION"' -i Chart.yaml
  SAVE ARTIFACT Chart.yaml AS LOCAL $CHART/Chart.yaml