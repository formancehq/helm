global:
  # -- Enable debug mode
  # @section -- Global configuration
  debug: false
  # -- is the base domain for portal and console
  # @section -- Global configuration
  serviceHost: ""

  # Add your license information 
  licence:
    # -- Obtain you licence cluster id with `kubectl get ns kube-system -o jsonpath='{.metadata.uid}'`
    # @section -- Licence configuration
    clusterID: ""
    # -- Licence Environment 
    # @section -- Licence configuration
    issuer: "https://licence.formance.cloud"
    # -- Licence Client Token delivered by contacting [Formance](https://formance.com)
    # @section -- Licence configuration
    token: ""
    # -- Licence Client Token as a secret
    # @section -- Licence configuration
    existingSecret: ""
    secretKeys:
      # -- Key in existing secret to use for Licence Client Token
      # @section -- Licence configuration
      token: ""

  aws:
    # -- Enable AWS IAM Authentification
    # @section -- Global AWS configuration
    iam: false

    # -- Enable AWS ELB
    # @section -- Global AWS configuration
    elb: false

  platform:
    console:
      enabled: true
      # -- is the scheme for the console
      # @section -- Global configuration
      scheme: "https"
      # -- is the host for the console
      # @section -- Global configuration
      host: "console.{{ .Values.global.serviceHost }}"
    consoleV3:
      enabled: false
      # -- is the scheme for the console
      # @section -- Global configuration
      scheme: "https"
      # -- is the host for the console
      # @section -- Global configuration
      host: "console.v3.{{ .Values.global.serviceHost }}"
      oauth:
        client:
          # -- is the id of the client
          # @section -- Global configuration
          id: "console-v3"
          # -- is the secret of the client
          # @section -- Global configuration
          secret: "changeMe2"
          # -- is the name of the secret
          # @section -- Global configuration
          scopes:
          - supertoken
          - accesses
          - remember_me
          - keep_refresh_token
          existingSecret: ""
          # -- is the key contained within the secret
          # @section -- Global configuration
          secretKeys:
            secret: ""
    portal:
      enabled: true
      # -- is the scheme for the portal
      # @section -- Global configuration
      scheme: "https"
      # -- is the host for the portal
      # @section -- Global configuration
      host: "portal.{{ .Values.global.serviceHost }}"
      oauth:
        client:
          # -- is the id of the client
          # @section -- Global configuration
          id: "portal"
          # -- is the secret of the client
          # @section -- Global configuration
          secret: "changeMe1"
          # -- is the name of the secret
          # @section -- Global configuration
          scopes:
          - supertoken
          - accesses
          - remember_me
          - keep_refresh_token
          existingSecret: ""
          # -- is the key contained within the secret
          # @section -- Global configuration
          secretKeys:
            secret: ""
    membership:
      # -- is the scheme for the membership
      # @section -- Global configuration
      scheme: "https"
      # -- is the host for the membership
      # @section -- Global configuration
      host: "membership.{{ .Values.global.serviceHost }}"

      relyingParty:
        # -- is the scheme the relying party
        # @section -- Global configuration
        scheme: "https"

        # -- is the host for the relying party issuer
        # @section -- Global configuration
        host: "dex.{{ .Values.global.serviceHost }}"

        # -- is the path for the relying party issuer
        # @section -- Global configuration
        path: ""

  nats:
    enabled: false
    # -- NATS URL: nats://nats:4222 nats://$PUBLISHER_NATS_USERNAME:$PUBLISHER_NATS_PASSWORD@nats:4222
    # @section -- Global configuration
    url: ""
    auth:
      user: ""
      password: ""
      existingSecret: ""
      secretKeys:
        password: password
        username: username

  monitoring:
    # -- Enable otel batching
    # @section -- Global configuration
    batch: false
    traces:
      # -- Enable otel tracing
      # @section -- Global configuration
      enabled: false
      # -- Endpoint
      # @section -- Global configuration
      endpoint: ""
      # -- Exporter
      # @section -- Global configuration
      exporter: "otlp"
      # -- Insecure
      # @section -- Global configuration
      insecure: true
      # -- Mode
      # @section -- Global configuration
      mode: "grpc"
      # -- Port
      # @section -- Global configuration
      port: 4317
    logs:
      # -- Enable logging
      # @section -- Global configuration
      enabled: true
      # -- Level: Info, Debug, Error
      # @section -- Global configuration
      level: "info"
      # -- Format
      # @section -- Global configuration
      format: "json"

  postgresql:
    # -- Host for PostgreSQL (overrides included postgreql `host`)
    # @section -- Global configuration
    host: ""
    # -- Additional arguments for PostgreSQL Connection URI
    # @section -- Global configuration
    additionalArgs: "sslmode=disable"
    auth:
      # -- Name for a custom user to create (overrides `auth.username`)
      # @section -- Global configuration
      username: formance
      # -- Password for the "postgres" admin user (overrides `auth.postgresPassword`)
      # @section -- Global configuration
      password: formance
      # -- Name for a custom database to create (overrides `auth.database`)
      # @section -- Global configuration
      database: formance
      # -- Password for the custom user to create (overrides `auth.password`)
      # @section -- Global configuration
      postgresPassword: formance
      # -- Name of existing secret to use for PostgreSQL credentials (overrides `auth.existingSecret`).
      # @section -- Global configuration
      existingSecret: ""
      secretKeys:
        # -- Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.adminPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
        # @section -- Global configuration
        adminPasswordKey: ""
        # -- Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.userPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
        # @section -- Global configuration
        userPasswordKey: ""

    service:
      ports:
        # -- PostgreSQL service port (overrides `service.ports.postgresql`)
        # @section -- Global configuration
        postgresql: 5432

# -- Count of replicas
replicaCount: 1

podDisruptionBudget:
  # -- Enable pod disruption budget
  enabled: false
  # -- Minimum available pods
  minAvailable: 1
  # -- Maximum unavailable pods
  maxUnavailable: 0

serviceAccount:
  # -- Service account creation
  create: true
  # -- Service account name
  name: ""
  # -- Service account annotations
  annotations: {}
  # eks.amazonaws.com/role-arn: ""

image:
  # -- Membership image repository
  repository: ghcr.io/formancehq/membership
  # -- Membership image pull policy
  pullPolicy: IfNotPresent
  # -- Membership image tag
  tag: ""

# -- Membership image pull secrets
imagePullSecrets: []

# -- Membership name override
nameOverride: ""
# -- Membership fullname override
fullnameOverride: ""

# -- Membership pod security context
podSecurityContext: {}
# fsGroup: 2000

securityContext:
  # -- Membership security context capabilities drop
  capabilities:
    drop:
    - ALL
  # -- Membership security context read only root filesystem
  readOnlyRootFilesystem: true
  # -- Membership security context run as non root
  runAsNonRoot: true
  # -- Membership security context run as user
  runAsUser: 1000

# -- Membership resources
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- Membership autoscaling
autoscaling: {}
  # enabled: false
  # minReplicas: 1
  # maxReplicas: 10
  # targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# -- Membership node selector
nodeSelector: {}

# -- Membership tolerations
tolerations: []

# -- Membership affinity
affinity: {}

# -- DEPRECATED Membership service
commonLabels: {}

# -- Membership debug
debug: false

# -- Membership dev, disable ssl verification
dev: false

# -- Membership init containers
initContainers: []

# -- Membership volume mounts
volumeMounts: []

# -- Membership annotations 
annotations: {}

# -- Membership volumes
volumes: []

service:
  # -- service annotations
  annotations: {}
  # -- service type
  type: ClusterIP
  # -- service cluster IP
  clusterIP: ""
  ports:
    # -- service http port
    http:
      port: 8080
      # -- service node port
      # nodePort:
    grpc:
      # -- service grpc port
      port: 8082
      # -- Membership service node port
      # nodePort:

ingress:
  # -- Membership ingress enabled
  enabled: true
  # -- Membership ingress class name
  className: ""
  # -- Membership ingress annotations
  annotations: {}
  hosts:
  # -- Membership ingress host
  - host: "{{ tpl .Values.global.platform.membership.host $ }}"
    paths:
    # -- Membership ingress path
    - path: /api
      # -- Membership ingress path type
      pathType: Prefix
  # -- Membership ingress tls
  tls: []
    # -- Membership ingress tls secret name
    # - secretName: YOUR_TLS_SECRET_NAME

# -- AWS Membership target groups
# @section -- Global AWS configuration
aws:
  targetGroups:
    http:
      ipAddressType: "ipv4"
      targetType: "ip"
      targetGroupARN: ""
      serviceRef:
        name: '{{ include "core.fullname" $ }}'
        port: "{{ .Values.service.ports.http.port }}"
    grpc:
      ipAddressType: "ipv4"
      targetType: "ip"
      targetGroupARN: ""
      serviceRef:
        name: '{{ include "core.fullname" $ }}'
        port: "{{ .Values.service.ports.grpc.port }}"

# TODO: See helm tags for more information
# https://helm.sh/docs/chart_template_guide/variables/#tags
feature:
  # -- Membership feature managed stacks
  # @section -- Membership Feature
  managedStacks: true
  # -- Membership feature disable events
  # @section -- Membership Feature
  disableEvents: true
  # -- Run migration in a hook
  # @section -- Membership Feature
  migrationHooks: false

config:
  # -- Override monitoring configuration
  # monitoring:
  #   # -- Override otel service name
  #   serviceName: "membership"
  #   # -- Override otel resources attributes
  #   attributes: ""

  # -- Additional Environment variables on the main deployment
  additionalEnv: []
  # -- Enable Fctl
  fctl: true
  # -- DEPRECATED Membership postgresql connection url
  # postgresqlUrl: "postgresql://formance:formance@postgresql.formance-control.svc:5432/formance?sslmode=disable"

  # -- Membership relying party connection url
  oidc:
    # -- Membership oidc client id
    clientId: "membership"
    # -- Membership oidc client secret
    clientSecret: "changeMe"
    # -- Membership oidc redirect uri
    scopes:
    - openid
    - email
    # -- Membership Dex federated id scope
    - federated:id
    # -- Membership oidc existing secret
    existingSecret: ""
    # -- Membership oidc secret key
    secretKeys:
      secret: ""

  auth:
    # -- Membership additional oauth clients
    additionalOAuthClients: []
    # -- According to "nsuµmh"
    # And https://github.com/spf13/cast/blob/e9ba3ce83919192b29c67da5bec158ce024fdcdb/caste.go#L61C3-L61C3
    tokenValidity:
      accessToken: "5m"
      refreshToken: "72h"

  grpc:
    # -- Membership agent grpc token
    tokens: []
    existingSecret: ""
    secretKeys:
      secret: "TOKENS"

  publisher:
    clientID: "membership"
    topicMapping: "membership"
    jetstream:
      replicas: 1

  stack:
    # # -- Only need for external use
    # # It inform stack client to reach the following server
    # # It might change depending on you stargate ingress configuration
    # stargateServerURL: "stargate.{{ .Values.global.serviceHost }}:443"

    # Modules created by default on a stack
    minimalStackModules:
    - Auth
    - Ledger
    - Payments
    - Gateway

    cycle:
      dryRun: true
      # According to https://github.com/spf13/viper/blob/f62f86a84b8395051efe0e490a29f3f89830a3ed/viper.go#L1048
      # And https://github.com/spf13/cast/blob/e9ba3ce83919192b29c67da5bec158ce024fdcdb/caste.go#L61C3-L61C3
      delay:
        # Based on last_state_update
        # ONLY for public region in a non production environment
        # 15 days
        # AFTER: Reset with /enable
        disposable: "360h"
        # ONLY for public region in a non production environment
        # Based on disposable_since datetime
        # SoftDelete: this update the state to Deleted and the cluster state to Disable
        # It is next up to warn cycle to handle the deletion
        # AFTER: Reset with /restore
        disable: "72h"
        # Configure polling delay on disable cycle
        disablePollingDelay: "1m"
        # Based on last_state_update
        # This is the delay from the disable state update to the prune state'udpate delay
        # It is also from now IF the state is overwriten by the user
        # Tipically with a
        # ```
        #  DELETE /organization/:orgId/stacks/:stackId/
        # ```
        # AFTER: Reset with /restore
        warn: "72h"
        # Based on warned_at datetime
        # This update the cluster state to Delete
        # 30 days
        # AFTER: Reset with /restore
        prune: "720h"
        # Configure polling delay on prune cycle
        prunePollingDelay: "1m"

  # -- CronJob to manage the stack life cycle and the garbage collector
  job:
    # -- Job create 2 jobs to eaither warn or prune a stacks
    # This does not change the state of the stack
    # WARN: Mark stack Disposable -> trigger a mail
    # PRUNE: Mark stack Warned -> trigger a mail
    # It blocks stack cycles if supendend
    # It is highly recommended to enable it as it is the only way we control
    stackLifeCycle:
      enabled: false
      suspend: false
      concurrencyPolicy: Forbid
      startingDeadlineSeconds: 200
      restartPolicy: Never
      schedule: "*/30 * * * *"
      resources: {}
      tolerations: []
      volumes: []
      volumeMounts: []

    # -- Clean expired tokens and refresh tokens after X time
    garbageCollector:
      enabled: false
      suspend: false
      concurrencyPolicy: Forbid
      startingDeadlineSeconds: 200
      restartPolicy: Never
      schedule: "0 0 * * *"
      resources: {}
      tolerations: []
      volumes: []
      volumeMounts: []

    invitationGC:
      suspend: false
      concurrencyPolicy: Forbid
      startingDeadlineSeconds: 200
      restartPolicy: Never
      schedule: "0/30 * * * *"
      resources: {}
      tolerations: []
      volumes: []
      volumeMounts: []

  migration:
    # -- Enable migration job
    # @section -- Global configuration
    enabled: true
    postgresql:
      auth:
        # -- Name for a custom user to create (overrides `auth.username`)
        # @section -- Global configuration
        username: ""
        # -- Password for the "postgres" admin user (overrides `auth.postgresPassword`)
        # @section -- Global configuration
        password: ""
        # -- Name of existing secret to use for PostgreSQL credentials (overrides `auth.existingSecret`).
        # @section -- Global configuration
        existingSecret: ""
        secretKeys:
          # -- Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.adminPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
          # @section -- Global configuration
          adminPasswordKey: ""

    serviceAccount:
      create: true
      name: ""
      annotations: {}

    # -- Membership job migration annotations
    # Argo CD translate `pre-install,pre-upgrade` to: argocd.argoproj.io/hook: PreSync
    annotations: {}

    ttlSecondsAfterFinished: ""
    volumes: []
    volumeMounts: []

dex:
  # -- Enable dex
  # @section -- Dex configuration
  enabled: true

  image:
    # -- image repository
    # @section -- Dex configuration
    repository: ghcr.io/formancehq/dex
    # -- image pull policy
    # @section -- Dex configuration
    pullPolicy: IfNotPresent
    # -- image tag
    # @section -- Dex configuration
    tag: v1.0.4

  ingress:
    # -- Dex ingress enabled
    # @section -- Dex configuration
    enabled: true
    # -- Dex ingress class name
    # @section -- Dex configuration
    className: ""
    # -- Dex ingress annotations
    # @section -- Dex configuration
    annotations: {}
    hosts:
    # -- Dex ingress host
    # @section -- Dex configuration
    - host: "{{ tpl .Values.global.platform.membership.relyingParty.host $ }}"
      paths:
      # -- Dex ingress path
      # @section -- Dex configuration
      # refer to .Values.global.platform.membership.relyingParty.host.path
      - path: "/"
        # -- Dex ingress path type
        # @section -- Dex configuration
        pathType: Prefix
    # -- Dex ingress tls
    # @section -- Dex configuration
    tls: []
      # -- Dex ingress tls secret name
      # @section -- Dex configuration
      # - secretName: YOUR_TLS_SECRET_NAME

  # -- AWS Target Groups
  # @section -- Global AWS configuration
  aws:
    targetGroups:
      dex-http:
        ipAddressType: "ipv4"
        targetType: "ip"
        targetGroupARN: ""
        serviceRef:
          name: '{{ include "dex.fullname" .Subcharts.dex }}'
          port: "{{ .Values.dex.service.ports.http.port }}"

  # -- Dex resources
  # @section -- Dex configuration
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  configSecret:
    # -- Dex config secret create
    # Default secret provided by the dex chart
    # @section -- Dex configuration
    create: false
    # -- Dex config secret create config secret overrides
    # @section -- Dex configuration
    # Enable secret config overrides provided by the cloudprem chart
    createConfigSecretOverrides: true
    # -- Dex config secret name
    # @section -- Dex configuration
    name: "membership-dex-config"

  # -- Dex additional environment variables
  # @section -- Dex configuration
  envVars: []

  # Unfortunalty Dex chart does not provide a way to use function within values
  #
  # # When using
  # # - oidc.clientSecret.secretKeys.secret
  # # - oidc.clientSecret.existingSecret
  # envVars:
  #   - name: MEMBERSHIP_CLIENT_SECRET
  #     valueFrom:
  #       secretKeyRef:
  #         name: "membership-secrets"
  #         key: "dex-client-secret"
  #
  # # When using .global.postgresql.auth.existingSecret
  #   - name: POSTGRES_PASSWORD
  #     valueFrom:
  #       secretKeyRef:
  # #       name:
  # #       key:
  #

  # -- Config override allow template function.
  # Database is setup on the chart global, make sure that user/password when using kubernetes secret
  # @section -- Dex configuration
  configOverrides:
    storage:
      type: postgres

    oauth2:
      # -- oauth2 skip approval screen
      # @section -- Dex configuration
      skipApprovalScreen: true
      # -- oauth2 response types
      # @section -- Dex configuration
      responseTypes:
      - code
      - token
      - id_token

    # -- enable password db
    # @section -- Dex configuration
    enablePasswordDB: true
    # Generate password:  https://github.com/dexidp/dex/blob/576f990d257d9dd63e283cf379960e50506e8bcc/examples/config-dev.yaml#L145
    staticPasswords:
    # -- static passwords email
    # @section -- Dex configuration
    - email: admin@formance.com
      # -- static passwords hash
      # @section -- Dex configuration
      hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W" # password
      # -- static passwords username
      # @section -- Dex configuration
      username: admin
      # -- static passwords user id
      # @section -- Dex configuration
      userID: 08a8684b-db88-4b73-90a9-3cd1661f5466

postgresql:
  # -- Enable postgresql
  # @section -- Postgresql configuration
  enabled: true

  # -- Postgresql fullname override
  # @section -- Postgresql configuration
  fullnameOverride: postgresql

  # -- Postgresql architecture
  # @section -- Postgresql configuration
  architecture: standalone

  # -- Postgresql primary persistence enabled
  # @section -- Postgresql configuration
  primary:
    persistence:
      enabled: false
